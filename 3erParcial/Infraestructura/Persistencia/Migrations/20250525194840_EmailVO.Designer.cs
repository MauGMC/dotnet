// <auto-generated />
using System;
using Infraestructura.Persistencia;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infraestructura.Persistencia.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250525194840_EmailVO")]
    partial class EmailVO
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Dominio.Entidades.Carrito", b =>
                {
                    b.Property<int>("CarritoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("carrito_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CarritoID"));

                    b.Property<int>("ClienteID")
                        .HasColumnType("int")
                        .HasColumnName("cliente_id");

                    b.Property<int>("Estado")
                        .HasColumnType("int")
                        .HasColumnName("estado");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("fecha_creacion");

                    b.Property<DateTime?>("FechaExpiracion")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("fecha_expiracion");

                    b.HasKey("CarritoID");

                    b.HasIndex("ClienteID")
                        .IsUnique();

                    b.ToTable("carrito", (string)null);
                });

            modelBuilder.Entity("Dominio.Entidades.Cliente", b =>
                {
                    b.Property<int>("ClienteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ClienteID"));

                    b.Property<string>("ApellidoMaterno")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ApellidoPaterno")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("DireccionID")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Sexo")
                        .HasColumnType("char(1)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("UsuarioID")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("ClienteID");

                    b.HasIndex("Telefono");

                    b.HasIndex("UsuarioID")
                        .IsUnique();

                    b.ToTable("clientes", (string)null);
                });

            modelBuilder.Entity("Dominio.Entidades.Compra", b =>
                {
                    b.Property<int>("CompraID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("compra_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CompraID"));

                    b.Property<int>("EmpleadoID")
                        .HasMaxLength(450)
                        .HasColumnType("int")
                        .HasColumnName("empleado_id");

                    b.Property<int>("Estado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("estado");

                    b.Property<DateTime>("FechaCompra")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("fecha_compra");

                    b.Property<DateTime?>("FechaEntrega")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("fecha_entrega");

                    b.Property<int>("MetodoDePagoID")
                        .HasColumnType("int")
                        .HasColumnName("metodo_pago_id");

                    b.Property<string>("NumeroFactura")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("numero_factura");

                    b.Property<int>("ProveedorID")
                        .HasColumnType("int")
                        .HasColumnName("proveedor_id");

                    b.Property<decimal>("Total")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("total");

                    b.HasKey("CompraID");

                    b.HasIndex("EmpleadoID");

                    b.HasIndex("MetodoDePagoID");

                    b.HasIndex("NumeroFactura")
                        .IsUnique()
                        .HasDatabaseName("IX_NumeroFactura");

                    b.HasIndex("ProveedorID");

                    b.ToTable("compras", (string)null);
                });

            modelBuilder.Entity("Dominio.Entidades.DetalleCompra", b =>
                {
                    b.Property<int>("DetalleCompraID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("detalle_compra_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("DetalleCompraID"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("int")
                        .HasColumnName("cantidad");

                    b.Property<int>("CompraID")
                        .HasColumnType("int")
                        .HasColumnName("compra_id");

                    b.Property<decimal>("PrecioUnitario")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("precio_unitario");

                    b.Property<int>("ProductoID")
                        .HasColumnType("int")
                        .HasColumnName("producto_id");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("subtotal");

                    b.HasKey("DetalleCompraID");

                    b.HasIndex("CompraID");

                    b.HasIndex("ProductoID");

                    b.ToTable("detalles_compras", (string)null);
                });

            modelBuilder.Entity("Dominio.Entidades.DetallePedido", b =>
                {
                    b.Property<int>("DetallePedidoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("detalle_pedido_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("DetallePedidoID"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("int")
                        .HasColumnName("cantidad");

                    b.Property<int>("PedidoID")
                        .HasColumnType("int")
                        .HasColumnName("pedido_id");

                    b.Property<decimal>("PrecioUnitario")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("precio_unitario");

                    b.Property<int>("ProductoID")
                        .HasColumnType("int")
                        .HasColumnName("producto_id");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("subtotal");

                    b.HasKey("DetallePedidoID");

                    b.HasIndex("PedidoID");

                    b.HasIndex("ProductoID");

                    b.ToTable("detalle_pedidos", (string)null);
                });

            modelBuilder.Entity("Dominio.Entidades.DetalleVenta", b =>
                {
                    b.Property<int>("DetalleVentaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("detalle_venta_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("DetalleVentaID"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("int")
                        .HasColumnName("cantidad");

                    b.Property<decimal>("PrecioUnitario")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("precio_unitario");

                    b.Property<int>("ProductoID")
                        .HasColumnType("int")
                        .HasColumnName("producto_id");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("subtotal");

                    b.Property<int>("VentaID")
                        .HasColumnType("int")
                        .HasColumnName("venta_id");

                    b.HasKey("DetalleVentaID");

                    b.HasIndex("ProductoID");

                    b.HasIndex("VentaID");

                    b.ToTable("detalle_ventas", (string)null);
                });

            modelBuilder.Entity("Dominio.Entidades.Direccion", b =>
                {
                    b.Property<int>("DireccionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("direccion_id");

                    b.Property<string>("Calle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("calle");

                    b.Property<string>("Ciudad")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ciudad");

                    b.Property<string>("CodigoPostal")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("codigo_postal");

                    b.Property<string>("Colonia")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("colonia");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("estado");

                    b.Property<int>("NumeroExterior")
                        .HasMaxLength(10)
                        .HasColumnType("int")
                        .HasColumnName("numero_exterior");

                    b.Property<int>("NumeroInterior")
                        .HasMaxLength(10)
                        .HasColumnType("int")
                        .HasColumnName("numero_interior");

                    b.Property<string>("Referencia")
                        .HasColumnType("longtext");

                    b.Property<string>("Telefono")
                        .HasColumnType("longtext");

                    b.HasKey("DireccionID");

                    b.ToTable("direcciones", (string)null);
                });

            modelBuilder.Entity("Dominio.Entidades.Empleado", b =>
                {
                    b.Property<int>("EmpleadoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("empleado_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EmpleadoID"));

                    b.Property<string>("ApellidoMaterno")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("apellido_materno");

                    b.Property<string>("ApellidoPaterno")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("apellido_paterno");

                    b.Property<int>("DireccionID")
                        .HasColumnType("int")
                        .HasColumnName("direccion_id");

                    b.Property<int>("Estado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("estado");

                    b.Property<DateTime?>("FechaContratacion")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("fecha_contratacion");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("fecha_nacimiento");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nombres");

                    b.Property<string>("Puesto")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("puesto");

                    b.Property<string>("Sexo")
                        .HasColumnType("varchar(1)")
                        .HasColumnName("sexo");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("telefono");

                    b.Property<string>("UsuarioID")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("usuario_id");

                    b.HasKey("EmpleadoID");

                    b.HasIndex("DireccionID");

                    b.HasIndex("Telefono");

                    b.HasIndex("UsuarioID")
                        .IsUnique();

                    b.ToTable("empleados", (string)null);
                });

            modelBuilder.Entity("Dominio.Entidades.Imagen", b =>
                {
                    b.Property<int>("ImagenID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("imagen_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ImagenID"));

                    b.Property<string>("IDOrigen")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("id_origen");

                    b.Property<string>("NombreArchivo")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("producto_id");

                    b.Property<string>("RutaImagen")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("ruta_imagen");

                    b.Property<string>("TablaOrigen")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("tabla_origen");

                    b.HasKey("ImagenID");

                    b.ToTable("imagenes", (string)null);
                });

            modelBuilder.Entity("Dominio.Entidades.Inventario", b =>
                {
                    b.Property<int>("InventarioID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("inventario_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("InventarioID"));

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("activo");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int")
                        .HasColumnName("cantidad");

                    b.Property<int>("CantidadMaxima")
                        .HasColumnType("int")
                        .HasColumnName("cantidad_maxima");

                    b.Property<int>("CantidadMinima")
                        .HasColumnType("int")
                        .HasColumnName("cantidad_minima");

                    b.Property<int>("Estado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("estado");

                    b.Property<DateTime>("FechaUltimoMovimiento")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("fecha_ultimo_movimiento");

                    b.Property<int>("ProductoID")
                        .HasColumnType("int")
                        .HasColumnName("producto_id");

                    b.Property<string>("Ubicacion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("ubicacion");

                    b.HasKey("InventarioID");

                    b.HasIndex("ProductoID")
                        .IsUnique();

                    b.ToTable("inventarios", (string)null);
                });

            modelBuilder.Entity("Dominio.Entidades.MetodoDePago", b =>
                {
                    b.Property<int>("MetodoDePagoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("metodo_pago_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("MetodoDePagoID"));

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("activo");

                    b.Property<string>("Banco")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("banco");

                    b.Property<string>("CVV")
                        .HasMaxLength(4)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("cvv");

                    b.Property<int>("ClienteID")
                        .HasColumnType("int")
                        .HasColumnName("cliente_id");

                    b.Property<int>("Estado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("estado");

                    b.Property<string>("FechaExpiracion")
                        .HasMaxLength(7)
                        .HasColumnType("varchar(7)")
                        .HasColumnName("fecha_expiracion");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nombre");

                    b.Property<string>("NombreTitular")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nombre_titular");

                    b.Property<string>("NumeroTarjeta")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("numero_tarjeta");

                    b.Property<string>("Referencia")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("referencia");

                    b.Property<string>("Tipo")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("tipo");

                    b.HasKey("MetodoDePagoID");

                    b.HasIndex("ClienteID");

                    b.ToTable("metodo_pago", (string)null);
                });

            modelBuilder.Entity("Dominio.Entidades.Notificacion", b =>
                {
                    b.Property<int>("NotificacionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("notificacion_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("NotificacionID"));

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("fecha");

                    b.Property<string>("Mensaje")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("mensaje");

                    b.Property<string>("Tipo")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("tipo");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("titulo");

                    b.HasKey("NotificacionID");

                    b.ToTable("notificaciones", (string)null);
                });

            modelBuilder.Entity("Dominio.Entidades.NotificacionPorUsuario", b =>
                {
                    b.Property<int>("NotificacionPorUsuarioID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("notificacion_por_usuario_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("NotificacionPorUsuarioID"));

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("fecha_creacion");

                    b.Property<DateTime?>("FechaLeida")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("fecha_leido");

                    b.Property<bool>("Leido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("leido");

                    b.Property<int>("NotificacionID")
                        .HasColumnType("int")
                        .HasColumnName("notificacion_id");

                    b.Property<string>("UsuarioID")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("usuario_id");

                    b.HasKey("NotificacionPorUsuarioID");

                    b.HasIndex("NotificacionID");

                    b.HasIndex("UsuarioID");

                    b.ToTable("notificaciones_por_usuarios", (string)null);
                });

            modelBuilder.Entity("Dominio.Entidades.Pedido", b =>
                {
                    b.Property<int>("PedidoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("pedido_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("PedidoID"));

                    b.Property<int>("ClienteID")
                        .HasColumnType("int")
                        .HasColumnName("cliente_id");

                    b.Property<string>("Comentarios")
                        .HasColumnType("longtext")
                        .HasColumnName("comentarios");

                    b.Property<int>("DireccionID")
                        .HasColumnType("int")
                        .HasColumnName("direccion_id");

                    b.Property<int>("Estado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("estado");

                    b.Property<DateTime?>("FechaEntrega")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("fecha_entrega");

                    b.Property<DateTime>("FechaExpiracion")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("fecha_expiracion");

                    b.Property<DateTime>("FechaPedido")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("fecha_pedido");

                    b.Property<decimal>("IVA")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("iva");

                    b.Property<int?>("MetodoDePagoID")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalConIVA")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("total_con_iva");

                    b.Property<decimal>("TotalSinIVA")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("total_sin_iva");

                    b.HasKey("PedidoID");

                    b.HasIndex("ClienteID");

                    b.HasIndex("DireccionID");

                    b.HasIndex("MetodoDePagoID");

                    b.ToTable("pedidos", (string)null);
                });

            modelBuilder.Entity("Dominio.Entidades.Permiso", b =>
                {
                    b.Property<int>("PermisoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("permiso_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("PermisoID"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("descripcion");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nombre");

                    b.HasKey("PermisoID");

                    b.ToTable("permisos", (string)null);
                });

            modelBuilder.Entity("Dominio.Entidades.PermisoDeRol", b =>
                {
                    b.Property<int>("PermisoDeRolID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("permiso_de_rol_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("PermisoDeRolID"));

                    b.Property<int>("PermisoID")
                        .HasColumnType("int")
                        .HasColumnName("permiso_id");

                    b.Property<int>("RolID")
                        .HasColumnType("int")
                        .HasColumnName("rol_id");

                    b.HasKey("PermisoDeRolID");

                    b.HasIndex("PermisoID");

                    b.HasIndex("RolID");

                    b.ToTable("permisos_de_roles", (string)null);
                });

            modelBuilder.Entity("Dominio.Entidades.Producto", b =>
                {
                    b.Property<int>("ProductoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("producto_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProductoID"));

                    b.Property<int>("Categoria")
                        .HasColumnType("int")
                        .HasColumnName("categoria");

                    b.Property<string>("Descripcion")
                        .HasColumnType("longtext")
                        .HasColumnName("descripcion");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("fecha_creacion");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nombre");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("precio");

                    b.Property<int>("Stock")
                        .HasColumnType("int")
                        .HasColumnName("stock");

                    b.HasKey("ProductoID");

                    b.HasIndex("Nombre");

                    b.ToTable("productos", (string)null);
                });

            modelBuilder.Entity("Dominio.Entidades.ProductoEnCarrito", b =>
                {
                    b.Property<int>("ProductoEnCarritoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("producto_en_carrito_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProductoEnCarritoID"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("int")
                        .HasColumnName("cantidad");

                    b.Property<int>("CarritoID")
                        .HasColumnType("int")
                        .HasColumnName("carrito_id");

                    b.Property<decimal>("PrecioUnitario")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("precio_unitario");

                    b.Property<int>("ProductoID")
                        .HasColumnType("int")
                        .HasColumnName("producto_id");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("subtotal");

                    b.HasKey("ProductoEnCarritoID");

                    b.HasIndex("CarritoID");

                    b.HasIndex("ProductoID");

                    b.ToTable("productos_en_carrito", (string)null);
                });

            modelBuilder.Entity("Dominio.Entidades.Proveedor", b =>
                {
                    b.Property<int>("ProveedorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("proveedor_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProveedorID"));

                    b.Property<bool?>("Activo")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("activo");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("direccion");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nombre");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("telefono");

                    b.HasKey("ProveedorID");

                    b.ToTable("proveedores", (string)null);
                });

            modelBuilder.Entity("Dominio.Entidades.Rol", b =>
                {
                    b.Property<int>("RolID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("rol_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("RolID"));

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("activo");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("descripcion");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("fecha_creacion");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nombre");

                    b.HasKey("RolID");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("Dominio.Entidades.RolDeUsuario", b =>
                {
                    b.Property<int>("RolDeUsuarioID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("rol_de_usuario_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("RolDeUsuarioID"));

                    b.Property<int>("RolID")
                        .HasColumnType("int");

                    b.Property<string>("UsuarioID")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("usuario_id");

                    b.HasKey("RolDeUsuarioID");

                    b.HasIndex("RolID");

                    b.HasIndex("UsuarioID");

                    b.ToTable("roles_de_usuarios", (string)null);
                });

            modelBuilder.Entity("Dominio.Entidades.Usuario", b =>
                {
                    b.Property<string>("UsuarioID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("usuario_id");

                    b.Property<bool>("Activo")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("activo");

                    b.Property<string>("Contrasena")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("contrasena");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("fecha_creacion");

                    b.Property<string>("NombreUsuario")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nombre_usuario");

                    b.Property<DateTime?>("UltimoAcceso")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ultimo_acceso");

                    b.HasKey("UsuarioID");

                    b.ToTable("usuario", (string)null);
                });

            modelBuilder.Entity("Dominio.Entidades.Venta", b =>
                {
                    b.Property<int>("VentaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("venta_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("VentaID"));

                    b.Property<int>("ClienteID")
                        .HasColumnType("int")
                        .HasColumnName("cliente_id");

                    b.Property<int>("Estado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("estado");

                    b.Property<DateTime>("FechaVenta")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("fecha_venta");

                    b.Property<decimal>("IVA")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(65,30)")
                        .HasDefaultValue(0m)
                        .HasColumnName("iva");

                    b.Property<int>("MetodoPagoID")
                        .HasColumnType("int")
                        .HasColumnName("metodo_pago_id");

                    b.Property<decimal>("TotalConIVA")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(65,30)")
                        .HasDefaultValue(0m)
                        .HasColumnName("total_con_iva");

                    b.Property<decimal>("TotalSinIVA")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(65,30)")
                        .HasDefaultValue(0m)
                        .HasColumnName("total_sin_iva");

                    b.HasKey("VentaID");

                    b.HasIndex("ClienteID");

                    b.HasIndex("MetodoPagoID");

                    b.ToTable("ventas", (string)null);
                });

            modelBuilder.Entity("Dominio.Entidades.Carrito", b =>
                {
                    b.HasOne("Dominio.Entidades.Cliente", "Cliente")
                        .WithOne("Carrito")
                        .HasForeignKey("Dominio.Entidades.Carrito", "ClienteID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("Dominio.Entidades.Cliente", b =>
                {
                    b.HasOne("Dominio.Entidades.Usuario", "Usuario")
                        .WithOne("Cliente")
                        .HasForeignKey("Dominio.Entidades.Cliente", "UsuarioID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Dominio.Entidades.Compra", b =>
                {
                    b.HasOne("Dominio.Entidades.Empleado", "Empleado")
                        .WithMany("Compras")
                        .HasForeignKey("EmpleadoID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Dominio.Entidades.MetodoDePago", "MetodoDePago")
                        .WithMany("Compras")
                        .HasForeignKey("MetodoDePagoID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Dominio.Entidades.Proveedor", "Proveedor")
                        .WithMany("Compras")
                        .HasForeignKey("ProveedorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Empleado");

                    b.Navigation("MetodoDePago");

                    b.Navigation("Proveedor");
                });

            modelBuilder.Entity("Dominio.Entidades.DetalleCompra", b =>
                {
                    b.HasOne("Dominio.Entidades.Compra", "Compra")
                        .WithMany("DetallesCompras")
                        .HasForeignKey("CompraID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Dominio.Entidades.Producto", "Producto")
                        .WithMany("DetallesCompras")
                        .HasForeignKey("ProductoID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Compra");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("Dominio.Entidades.DetallePedido", b =>
                {
                    b.HasOne("Dominio.Entidades.Pedido", "Pedido")
                        .WithMany("DetallesPedidos")
                        .HasForeignKey("PedidoID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Dominio.Entidades.Producto", "Producto")
                        .WithMany("DetallesPedidos")
                        .HasForeignKey("ProductoID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Pedido");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("Dominio.Entidades.DetalleVenta", b =>
                {
                    b.HasOne("Dominio.Entidades.Producto", "Producto")
                        .WithMany("DetallesVentas")
                        .HasForeignKey("ProductoID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Dominio.Entidades.Venta", "Venta")
                        .WithMany("DetallesVentas")
                        .HasForeignKey("VentaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Producto");

                    b.Navigation("Venta");
                });

            modelBuilder.Entity("Dominio.Entidades.Direccion", b =>
                {
                    b.HasOne("Dominio.Entidades.Cliente", "Cliente")
                        .WithMany("Direcciones")
                        .HasForeignKey("DireccionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("Dominio.Entidades.Empleado", b =>
                {
                    b.HasOne("Dominio.Entidades.Direccion", "Direccion")
                        .WithMany("Empleados")
                        .HasForeignKey("DireccionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Dominio.Entidades.Usuario", "Usuario")
                        .WithOne("Empleado")
                        .HasForeignKey("Dominio.Entidades.Empleado", "UsuarioID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Direccion");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Dominio.Entidades.Inventario", b =>
                {
                    b.HasOne("Dominio.Entidades.Producto", "Producto")
                        .WithOne("Inventario")
                        .HasForeignKey("Dominio.Entidades.Inventario", "ProductoID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("Dominio.Entidades.MetodoDePago", b =>
                {
                    b.HasOne("Dominio.Entidades.Cliente", "Cliente")
                        .WithMany("MetodosDePago")
                        .HasForeignKey("ClienteID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("Dominio.Entidades.NotificacionPorUsuario", b =>
                {
                    b.HasOne("Dominio.Entidades.Notificacion", "Notificacion")
                        .WithMany("NotificacionesPorUsuarios")
                        .HasForeignKey("NotificacionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Dominio.Entidades.Usuario", "Usuario")
                        .WithMany("NotificacionesPorUsuarios")
                        .HasForeignKey("UsuarioID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Notificacion");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Dominio.Entidades.Pedido", b =>
                {
                    b.HasOne("Dominio.Entidades.Cliente", "Cliente")
                        .WithMany("Pedidos")
                        .HasForeignKey("ClienteID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Dominio.Entidades.Direccion", "Direccion")
                        .WithMany("Pedidos")
                        .HasForeignKey("DireccionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Dominio.Entidades.MetodoDePago", null)
                        .WithMany("Pedidos")
                        .HasForeignKey("MetodoDePagoID");

                    b.Navigation("Cliente");

                    b.Navigation("Direccion");
                });

            modelBuilder.Entity("Dominio.Entidades.PermisoDeRol", b =>
                {
                    b.HasOne("Dominio.Entidades.Permiso", "Permiso")
                        .WithMany("PermisoDeRoles")
                        .HasForeignKey("PermisoID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Dominio.Entidades.Rol", "Rol")
                        .WithMany("PermisosRoles")
                        .HasForeignKey("RolID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Permiso");

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("Dominio.Entidades.ProductoEnCarrito", b =>
                {
                    b.HasOne("Dominio.Entidades.Carrito", "Carrito")
                        .WithMany("ProductosEnCarrito")
                        .HasForeignKey("CarritoID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Dominio.Entidades.Producto", "Producto")
                        .WithMany("ProductosEnCarrito")
                        .HasForeignKey("ProductoID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Carrito");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("Dominio.Entidades.Proveedor", b =>
                {
                    b.OwnsOne("Dominio.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<int>("ProveedorID")
                                .HasColumnType("int");

                            b1.Property<string>("Valor")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("varchar(100)")
                                .HasColumnName("email");

                            b1.HasKey("ProveedorID");

                            b1.ToTable("proveedores");

                            b1.WithOwner()
                                .HasForeignKey("ProveedorID");
                        });

                    b.Navigation("Email")
                        .IsRequired();
                });

            modelBuilder.Entity("Dominio.Entidades.RolDeUsuario", b =>
                {
                    b.HasOne("Dominio.Entidades.Rol", "Rol")
                        .WithMany("RolesDeUsuarios")
                        .HasForeignKey("RolID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Dominio.Entidades.Usuario", "Usuario")
                        .WithMany("RolesDeUsuarios")
                        .HasForeignKey("UsuarioID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Rol");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Dominio.Entidades.Usuario", b =>
                {
                    b.OwnsOne("Dominio.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<string>("UsuarioID")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("Valor")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("varchar(100)")
                                .HasColumnName("email");

                            b1.HasKey("UsuarioID");

                            b1.ToTable("usuario");

                            b1.WithOwner()
                                .HasForeignKey("UsuarioID");
                        });

                    b.Navigation("Email")
                        .IsRequired();
                });

            modelBuilder.Entity("Dominio.Entidades.Venta", b =>
                {
                    b.HasOne("Dominio.Entidades.Cliente", "Cliente")
                        .WithMany("Ventas")
                        .HasForeignKey("ClienteID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Dominio.Entidades.MetodoDePago", "MetodoDePago")
                        .WithMany("Ventas")
                        .HasForeignKey("MetodoPagoID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("MetodoDePago");
                });

            modelBuilder.Entity("Dominio.Entidades.Carrito", b =>
                {
                    b.Navigation("ProductosEnCarrito");
                });

            modelBuilder.Entity("Dominio.Entidades.Cliente", b =>
                {
                    b.Navigation("Carrito")
                        .IsRequired();

                    b.Navigation("Direcciones");

                    b.Navigation("MetodosDePago");

                    b.Navigation("Pedidos");

                    b.Navigation("Ventas");
                });

            modelBuilder.Entity("Dominio.Entidades.Compra", b =>
                {
                    b.Navigation("DetallesCompras");
                });

            modelBuilder.Entity("Dominio.Entidades.Direccion", b =>
                {
                    b.Navigation("Empleados");

                    b.Navigation("Pedidos");
                });

            modelBuilder.Entity("Dominio.Entidades.Empleado", b =>
                {
                    b.Navigation("Compras");
                });

            modelBuilder.Entity("Dominio.Entidades.MetodoDePago", b =>
                {
                    b.Navigation("Compras");

                    b.Navigation("Pedidos");

                    b.Navigation("Ventas");
                });

            modelBuilder.Entity("Dominio.Entidades.Notificacion", b =>
                {
                    b.Navigation("NotificacionesPorUsuarios");
                });

            modelBuilder.Entity("Dominio.Entidades.Pedido", b =>
                {
                    b.Navigation("DetallesPedidos");
                });

            modelBuilder.Entity("Dominio.Entidades.Permiso", b =>
                {
                    b.Navigation("PermisoDeRoles");
                });

            modelBuilder.Entity("Dominio.Entidades.Producto", b =>
                {
                    b.Navigation("DetallesCompras");

                    b.Navigation("DetallesPedidos");

                    b.Navigation("DetallesVentas");

                    b.Navigation("Inventario")
                        .IsRequired();

                    b.Navigation("ProductosEnCarrito");
                });

            modelBuilder.Entity("Dominio.Entidades.Proveedor", b =>
                {
                    b.Navigation("Compras");
                });

            modelBuilder.Entity("Dominio.Entidades.Rol", b =>
                {
                    b.Navigation("PermisosRoles");

                    b.Navigation("RolesDeUsuarios");
                });

            modelBuilder.Entity("Dominio.Entidades.Usuario", b =>
                {
                    b.Navigation("Cliente")
                        .IsRequired();

                    b.Navigation("Empleado")
                        .IsRequired();

                    b.Navigation("NotificacionesPorUsuarios");

                    b.Navigation("RolesDeUsuarios");
                });

            modelBuilder.Entity("Dominio.Entidades.Venta", b =>
                {
                    b.Navigation("DetallesVentas");
                });
#pragma warning restore 612, 618
        }
    }
}
